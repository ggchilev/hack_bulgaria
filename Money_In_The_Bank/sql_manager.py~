import sqlite3
from client import Client
import start
from settings import DB_NAME, SQL_STRUCTURE_FILE
import os
import datetime


conn = sqlite3.connect(DB_NAME)
conn.row_factory = sqlite3.Row
cursor = conn.cursor()


class UserBlockedException(Exception):
    pass


def create_database():
    with open(SQL_STRUCTURE_FILE, 'r') as f:
        create_query = f.read()

    cursor.executescript(create_query)


    # TODO: Better raise exception: UserNotFound
def get_id_by_username(username):
    query = """SELECT id FROM clients
               WHERE username = ?
               LIMIT 1"""
    cursor.execute(query, (username, ))
    result = cursor.fetchone()

    if result is None:
        return None

    return result['id']


def change_message(new_message, logged_user):
    cursor.execute("""UPDATE clients
                      SET message = (?)
                      WHERE id = (?)""", ((new_message, logged_user.get_id())))
    conn.commit()
    logged_user.set_message(new_message)


def change_pass(new_pass, logged_user):
    cursor.execute("""UPDATE clients SET password = (?)
                      WHERE id = (?)""", ((new_pass, logged_user.get_id())))
    conn.commit()


def register(username, password):
    cursor.execute("""insert into clients (username, password, salt)
                   values (?, ?, ?)""", ((username, password[0], password[1])))
    conn.commit()


def create_login_attempt(username, status):
    now = datetime.datetime.now()
    user_id = get_id_by_username(username)
    insert_sql = """INSERT INTO login_attempts(client_id,
                                               attempt_status,
                                               timestamp)
                    VALUES(?, ?, ?)"""

    cursor.execute(insert_sql, (user_id, status, now))
    conn.commit()


def is_blocked(username):
    insert_sql = """SELECT attempt_status FROM login_attempts"""
    cursor.execute(insert_sql)
    num = cursor.fetchone()
    conn.commit
    if num[0] >= 5:
        return True
    else:
        return False


def blocked_user(username):
    insert_sql = """SELECT timestamp FROM login_attempts
             WHERE attempt_status = ?
             LIMIT 1"""
    cursor.execute(insert_sql, ('FAILED', ))
    attempt_time = cursor.fetchone()
    conn.commit
    print(datetime.datetime.now() - attempt_time[0])


def login(username, password):
    if is_blocked(username):
        print("Blocked")
        blocked_user(username)
    else:
        print("Not blocked")
    user = _login(username, password)
    print(is_blocked(username))
    if user:
        # Да отбележим успешен опит
        create_login_attempt(username, status="SUCCESS")
        return user
    else:
        create_login_attempt(username, status="FAILED")
        # Да отбележим неуспешен опит
        # Трябва ли вече да блокираме този username?
        return False


def _login(username, password):
    salt_query = """SELECT salt
                    FROM clients
                    WHERE username = ?
                    LIMIT 1"""
    cursor.execute(salt_query, (username,))
    auth_result = cursor.fetchone()
    if auth_result is None:
        return False
    pwd_hash, _ = start.hash_password(password, salt=auth_result[0])
    cursor.execute("""SELECT id, username, balance, message
                      FROM clients
                      WHERE username = (?)
                      AND password = (?)
                      LIMIT 1""", ((username, pwd_hash)))
    user = cursor.fetchone()
    if(user):
        return Client(user[0], user[1], user[2], user[3])
    else:
        return False
